# Generated by Django 3.2.11 on 2022-05-23 10:12

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyValuation',
            fields=[
                ('id_company_valuation', models.BigAutoField(primary_key=True, serialize=False)),
                ('row_number', models.IntegerField()),
                ('company_code', models.CharField(max_length=2)),
                ('sim_round', models.IntegerField()),
                ('sim_step', models.IntegerField()),
                ('sim_calendar_date', models.DateTimeField()),
                ('sim_period', models.IntegerField()),
                ('sim_elapsed_steps', models.IntegerField()),
                ('bank_cash_account', models.FloatField()),
                ('accounts_receivable', models.IntegerField()),
                ('bank_loan', models.FloatField()),
                ('accounts_payable', models.FloatField()),
                ('profit', models.FloatField()),
                ('debt_loading', models.FloatField()),
                ('credit_rating', models.CharField(max_length=10)),
                ('company_risk_rate_pct', models.FloatField()),
                ('company_valuation', models.FloatField()),
                ('currency', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'company_valuation'
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id_inventory', models.BigAutoField(primary_key=True, serialize=False)),
                ('inventory_opening_balance', models.IntegerField()),
                ('row_number', models.IntegerField()),
                ('plant', models.CharField(max_length=2)),
                ('sim_round', models.IntegerField()),
                ('sim_step', models.IntegerField()),
                ('sim_calendar_date', models.DateTimeField()),
                ('sim_period', models.IntegerField()),
                ('sim_elapsed_steps', models.IntegerField()),
                ('storage_location', models.CharField(max_length=3)),
                ('material_number', models.CharField(max_length=6)),
                ('material_description', models.TextField()),
                ('material_type', models.TextField()),
                ('material_code', models.CharField(max_length=3)),
                ('material_label', models.TextField()),
                ('unit', models.CharField(max_length=2)),
            ],
            options={
                'db_table': 'inventory'
            },
        ),
        migrations.CreateModel(
            name='PricingConditions',
            fields=[
                ('id_pricing_conditions', models.BigAutoField(primary_key=True, serialize=False)),
                ('price', models.FloatField()),
                ('sales_organization', models.CharField(max_length=2)),
                ('row_number', models.IntegerField()),
                ('sim_round', models.IntegerField()),
                ('sim_step', models.IntegerField()),
                ('sim_calendar_date', models.DateTimeField()),
                ('sim_period', models.IntegerField()),
                ('sim_elapsed_steps', models.IntegerField()),
                ('material_number', models.CharField(max_length=6)),
                ('material_description', models.TextField()),
                ('distribution_channel', models.IntegerField()),
                ('dc_name', models.TextField()),
                ('currency', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'pricing_conditions'
            },
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id_sales', models.BigAutoField(primary_key=True, serialize=False)),
                ('row_number', models.IntegerField()),
                ('sales_organization', models.CharField(max_length=2)),
                ('sim_round', models.IntegerField()),
                ('sim_step', models.IntegerField()),
                ('sim_calendar_date', models.DateTimeField()),
                ('sim_period', models.IntegerField()),
                ('sim_elapsed_steps', models.IntegerField()),
                ('sales_order_number', models.IntegerField()),
                ('line_item', models.IntegerField()),
                ('storage_location', models.CharField(max_length=3)),
                ('region', models.CharField(max_length=50)),
                ('area', models.CharField(choices=[('North', 'North'), ('West', 'West'), ('South', 'South')], max_length=10)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=20)),
                ('postal_code', models.IntegerField()),
                ('customer_number', models.IntegerField()),
                ('distribution_channel', models.IntegerField()),
                ('material_number', models.CharField(max_length=6)),
                ('material_description', models.TextField()),
                ('material_type', models.TextField()),
                ('material_code', models.CharField(max_length=3)),
                ('material_label', models.CharField(max_length=50)),
                ('quantity', models.IntegerField()),
                ('quantity_delivered', models.IntegerField()),
                ('unit', models.CharField(max_length=2)),
                ('net_price', models.FloatField()),
                ('net_value', models.FloatField()),
                ('cost', models.FloatField()),
                ('currency', models.CharField(max_length=5)),
                ('contribution_margin', models.FloatField()),
                ('contribution_margin_pct', models.FloatField()),
            ],
            options={
                'db_table': 'sales'
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('odata_flow', models.CharField(max_length=100)),
                ('game_set', models.IntegerField()),
                ('team', models.CharField(max_length=26)),
                ('creation_date', models.DateTimeField(verbose_name='creation date')),
                ('is_running', models.BooleanField(default=True, verbose_name='Running')),
                ('is_stopped', models.BooleanField(default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
